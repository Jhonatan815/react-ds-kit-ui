import js from '@eslint/js'
import ts from '@typescript-eslint/eslint-plugin'
import tsParser from '@typescript-eslint/parser'
import prettierConfig from 'eslint-config-prettier'
import importPlugin from 'eslint-plugin-import'
import jsxA11y from 'eslint-plugin-jsx-a11y'
import react from 'eslint-plugin-react'
import hooks from 'eslint-plugin-react-hooks'
import testingLibrary from 'eslint-plugin-testing-library'

const rules = {
  'react/react-in-jsx-scope': 'off',
  'react-hooks/rules-of-hooks': 'error',
  'react-hooks/exhaustive-deps': 'warn',
  'no-console': ['warn', { allow: ['error', 'info'] }],
  'prefer-destructuring': ['error', { object: true }],
  'no-debugger': 'error',
  eqeqeq: ['error', 'always'],
  curly: ['error', 'all'],
  'prefer-const': 'error',
  'no-var': 'error',
  'object-shorthand': 'error',
  'no-unused-vars': 'off',
  '@typescript-eslint/no-unused-vars': [
    'error',
    { argsIgnorePattern: '^_', varsIgnorePattern: '^_' },
  ],
  '@typescript-eslint/explicit-function-return-type': ['warn', { allowExpressions: true }],
  '@typescript-eslint/consistent-type-imports': [
    'error',
    { prefer: 'type-imports', disallowTypeAnnotations: false },
  ],
  '@typescript-eslint/no-explicit-any': 'warn',
  '@typescript-eslint/no-non-null-assertion': 'warn',
  '@typescript-eslint/array-type': ['error', { default: 'array-simple' }],
  'jsx-a11y/alt-text': 'error',
  'jsx-a11y/anchor-has-content': 'error',
  'jsx-a11y/anchor-is-valid': 'error',
  'jsx-a11y/aria-props': 'error',
  'jsx-a11y/aria-proptypes': 'error',
  'jsx-a11y/aria-unsupported-elements': 'error',
  'jsx-a11y/click-events-have-key-events': 'error',
  'jsx-a11y/heading-has-content': 'error',
  'jsx-a11y/html-has-lang': 'error',
  'jsx-a11y/img-redundant-alt': 'error',
  'jsx-a11y/interactive-supports-focus': 'error',
  'jsx-a11y/label-has-associated-control': 'error',
  'jsx-a11y/mouse-events-have-key-events': 'error',
  'jsx-a11y/no-autofocus': 'error',
  'jsx-a11y/no-noninteractive-element-interactions': 'error',
  'jsx-a11y/no-static-element-interactions': 'error',
  'jsx-a11y/role-has-required-aria-props': 'error',
  'jsx-a11y/role-supports-aria-props': 'error',
  'sort-keys': ['error', 'asc', { caseSensitive: true, natural: false, minKeys: 2 }],
  'no-use-before-define': ['error', { functions: true, classes: true, variables: true }],
  'import/prefer-default-export': 'off',
  'linebreak-style': ['error', 'unix'],
  'no-debugger': ['warn'],
  'no-unused-vars': ['warn'],
  quotes: ['error', 'single'],
  semi: ['error', 'never'],
  'no-console': ['warn', { allow: ['error', 'info'] }],
  'prefer-destructuring': ['error', { object: true }],
  'import/order': [
    'error',
    {
      groups: ['builtin', 'external', 'internal'],
      'newlines-between': 'never',
      alphabetize: { order: 'asc', caseInsensitive: true },
      pathGroups: [{ pattern: 'react', group: 'external', position: 'after' }],
      pathGroupsExcludedImportTypes: ['react'],
    },
  ],
  'react/jsx-pascal-case': [2],
  'react/jsx-no-useless-fragment': ['error'],
  'react/jsx-no-target-blank': ['error'],
  'react/no-unused-prop-types': ['error'],
  'react/no-typos': ['error'],
  'react/no-danger': ['error'],
  'react/no-array-index-key': ['error'],
  'react/forbid-prop-types': ['error'],
  'react/require-default-props': ['error'],
  'react/button-has-type': ['error'],
  'react/jsx-filename-extension': ['warn', { extensions: ['.tsx'] }],
  'react/prop-types': 'warn',
  'react/react-in-jsx-scope': 'off',
  'react/jsx-props-no-spreading': ['error'],
  'react-hooks/exhaustive-deps': 'off',
  'react/jsx-sort-props': [
    'warn',
    {
      callbacksLast: false,
      ignoreCase: true,
      shorthandFirst: false,
      shorthandLast: false,
    },
  ],
}

export default [
  {
    ignores: [
      '**/dist/**',
      '**/.next/**',
      '**/node_modules/**',
      '**/coverage/**',
      '**/*.config.{js,ts,mjs}',
      '**/build/**',
    ],
  },
  js.configs.recommended,
  {
    files: ['**/*.{ts,tsx,js,jsx}'],
    ignores: ['**/*.test.{ts,tsx,js,jsx}', '**/*.spec.{ts,tsx,js,jsx}'],
    languageOptions: {
      parser: tsParser,
      ecmaVersion: 'latest',
      sourceType: 'module',
      parserOptions: {
        ecmaFeatures: {
          jsx: true,
        },
      },
      globals: {
        afterAll: 'readonly',
        afterEach: 'readonly',
        alert: 'readonly',
        beforeAll: 'readonly',
        beforeEach: 'readonly',
        console: 'readonly',
        describe: 'readonly',
        document: 'readonly',
        fetch: 'readonly',
        history: 'readonly',
        JSX: 'readonly',
        localStorage: 'readonly',
        location: 'readonly',
        navigator: 'readonly',
        React: 'readonly',
        sessionStorage: 'readonly',
        URL: 'readonly',
        URLSearchParams: 'readonly',
        window: 'readonly',
      },
    },
    plugins: {
      '@typescript-eslint': ts,
      react,
      'react-hooks': hooks,
      'jsx-a11y': jsxA11y,
      import: importPlugin,
    },
    rules,
    settings: {
      react: {
        version: 'detect',
      },
    },
  },
  // Configuration for test files
  {
    files: ['**/*.test.{ts,tsx,js,jsx}', '**/*.spec.{ts,tsx,js,jsx}'],
    languageOptions: {
      parser: tsParser,
      ecmaVersion: 'latest',
      sourceType: 'module',
      parserOptions: {
        ecmaFeatures: {
          jsx: true,
        },
      },
      globals: {
        afterAll: 'readonly',
        afterEach: 'readonly',
        beforeAll: 'readonly',
        beforeEach: 'readonly',
        console: 'readonly',
        describe: 'readonly',
        document: 'readonly',
        expect: 'readonly',
        it: 'readonly',
        jest: 'readonly',
        JSX: 'readonly',
        localStorage: 'readonly',
        navigator: 'readonly',
        React: 'readonly',
        test: 'readonly',
        vi: 'readonly',
        vitest: 'readonly',
        window: 'readonly',
      },
    },
    plugins: {
      '@typescript-eslint': ts,
      react,
      'react-hooks': hooks,
      'jsx-a11y': jsxA11y,
      'testing-library': testingLibrary,
    },
    rules: {
      'react/react-in-jsx-scope': 'off',
      'react-hooks/rules-of-hooks': 'error',
      'react-hooks/exhaustive-deps': 'warn',
      'no-console': ['warn', { allow: ['error', 'info'] }],
      'testing-library/await-async-queries': 'error',
      'testing-library/no-await-sync-queries': 'error',
      'testing-library/no-debugging-utils': 'warn',
      'testing-library/no-dom-import': 'error',
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
  },
  prettierConfig,
]
